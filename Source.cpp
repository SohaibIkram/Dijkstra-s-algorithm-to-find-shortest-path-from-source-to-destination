#include<iostream>
#include <ctime>
#include <cstdlib>

using namespace std;


int cost[50][50], n;
const int p = 50;
const int q = 50;

int getMin(int dist[], bool visited[]) {
    int key = 0;
    int min = INT_MAX;
    for (int i = 0; i < n; i++) {
        if (!visited[i] && dist[i] < min) {
            min = dist[i];
            key = i;
        }
    }
    return key;
}

void display(int dist[], int par[]) {
    for (int i = 0; i < n; i++) {
        int temp = par[i];
        cout << i << " <- ";
        while (temp != -1)
        {
            cout << temp+1 << " <- ";
            temp = par[temp];
        }
        cout << endl;
        cout << "::::Distance = " << dist[i];
        cout << endl;
    }
}


void dijkstra(int src, int cost[50][50]) {
    int par[100], dist[100];
    bool visited[100] = { 0 };
    fill(dist, dist + n, INT_MAX);

    dist[src] = 0;
    par[src] = -1;

    for (int g = 0; g < n - 1; g++) {
        int u = getMin(dist, visited);
        visited[u] = true;
        cout << " min = " << u << endl;
        for (int v = 0; v < n; v++) {
            if (!visited[v] && (dist[u] + cost[u][v]) < dist[v] && cost[u][v] != 9999)
            {
                par[v] = u;
                dist[v] = dist[u] + cost[u][v];
            }
        }
    }

    display(dist, par);
}

int Count_Path_Using_DFS(int m[p][q], int source, int destination) {
    static int A[50] = { 0 };
    //static array for checking a particular node is visited or not

    //for count a number of path
    static int c = 0;


    A[source] = 1;//marking of visited node

    if (m[source][destination] == 1) {
        c++;
        cout << c << endl;
    }
    else {

        for (int j = 1; j < p; ++j) {
            if (A[j] == 0 && m[source][j] == 1) {//for checking edge exist or not among v and j vertices's and checking node is visited or not
                Count_Path_Using_DFS(m, j, destination);
                //recursive call

                A[j] = 0;//this is slight modification from DFS Traversal
            }
        }
    }

    return c;
}

int allpath() {
    int a[50][50] = {
   {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{ 1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,1,0,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,1 },
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0 },
    };


    //if path exit
    cout << "Total Number of Paths=" << " ";
    cout << Count_Path_Using_DFS(a, 0, 49) << endl;
    return 0;
}



int main(void) {
    cout << "Enter n : "; //Number of Nodes
    cin >> n;

    srand(time(0));
    int rand_var[102]; //Random value array
    int cost[50][50];


    int select;
    cout<<"Random cost matrix? 1(Y) 2(N): ";
    cin>>select;

    for (int x = 0; x <100 ; x++)

    {
        rand_var[x] = 1 + (rand() % 15);
   }

    /*Cost Matrix with link values as provided in our assignment*/
    int costassignment[50][50]={
   {0, 1, 999, 999, 999, 999, 999, 999, 999, 999, 4, 8, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999},
{ 1,0,5,999,999,999,999,999,999,999,999,1,1,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,5,0,7,999,999,999,999,999,999,999,999,8,2,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,7,0,1,999,999,999,999,999,999,999,999,2,2,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,1,0,3,999,999,999,999,999,999,999,999,4,4,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,3,0,7,999,999,999,999,999,999,999,999,1,2,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,7,0,5,999,999,999,999,999,999,999,999,2,1,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,5,0,5,999,999,999,999,999,999,999,999,4,8,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,5,0,1,999,999,999,999,999,999,999,999,2,2,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,1,0,999,999,999,999,999,999,999,999,1,2,999,999,999,999,999,999,999,999,999,5,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 4,999,999,999,999,999,999,999,999,999,0,5,999,999,999,999,999,999,999,999,5,2,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 8,1,999,999,999,999,999,999,999,999,5,0,7,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,1,8,999,999,999,999,999,999,999,999,7,0,1,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,2,2,999,999,999,999,999,999,999,999,1,0,11,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,2,4,999,999,999,999,999,999,999,999,11,0,5,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,4,1,999,999,999,999,999,999,999,999,5,0,5,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,2,2,999,999,999,999,999,999,999,999,5,0,7,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,1,4,999,999,999,999,999,999,999,999,7,0,1,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,8,2,1,999,999,999,999,999,999,999,1,0,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,2,2,999,999,999,999,999,999,999,999,999,0,999,999,999,999,999,999,999,999,2,5,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,5,999,999,999,999,999,999,999,999,999,0,3,999,999,999,999,999,999,999,999,8,7,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,2,999,999,999,999,999,999,999,999,3,0,1,999,999,999,999,999,999,999,999,4,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,1,0,7,999,999,999,999,999,999,999,999,3,2,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,7,0,3,999,999,999,999,999,999,999,999,1,2,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,3,0,1,999,999,999,999,999,999,999,999,5,5,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,1,0,5,999,999,999,999,999,999,999,999,2,1,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,5,0,1,999,999,999,999,999,999,999,999,7,5,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,1,0,3,999,999,999,999,999,999,999,999,9,11,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,2,999,999,999,999,999,999,999,3,0,5,999,999,999,999,999,999,999,999,11,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,5,999,999,999,999,999,999,999,999,999,999,5,999,999,999,999,999,999,999,5,0,999,999,999,999,999,999,999,999,999,2,5,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,8,999,999,999,999,999,999,999,999,999,0,1,999,999,999,999,999,999,999,999,5,5,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,7,4,999,999,999,999,999,999,999,999,1,0,4,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,3,999,999,999,999,999,999,999,999,4,0,3,999,999,999,999,999,999,999,1,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,2,1,999,999,999,999,999,999,999,999,3,0,8,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,2,5,999,999,999,999,999,999,999,999,8,0,5,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,5,2,999,999,999,999,999,999,999,999,5,0,2,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,1,7,999,999,999,999,999,999,999,999,2,0,1,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,5,9,999,999,999,999,999,999,999,999,1,0,5,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,11,11,999,999,999,999,999,999,999,999,5,0,2,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,2,999,999,999,999,999,999,999,999,2,0,999,999,999,999,999,999,999,999,2,4 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,5,999,999,999,999,999,999,999,999,999,0,5,9,11,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,5,999,1,999,999,999,999,999,999,999,5,0,6,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,9,6,0,1,7,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,11,999,1,0,5,1,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,7,5,0,2,2,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,1,2,0,1,7,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,2,1,0,2,5,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,7,2,0,5,2 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,2,999,999,999,999,999,999,5,5,0,2 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,4,999,999,999,999,999,999,999,2,2,0 },
    };

/*Cost Matrix with random*/
    int costrandom[50][50] = {
   {0, rand_var[0], 999, 999, 999, 999, 999, 999, 999, 999, rand_var[1], rand_var[2], 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999, 999},
{ rand_var[0],0,rand_var[3],999,999,999,999,999,999,999,999,rand_var[4],rand_var[5],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,rand_var[3],0,rand_var[6],999,999,999,999,999,999,999,999,rand_var[9],rand_var[10],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,rand_var[6],0,rand_var[7],999,999,999,999,999,999,999,999,rand_var[8],rand_var[11],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,rand_var[7],0,rand_var[12],999,999,999,999,999,999,999,999,rand_var[13],rand_var[14],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,rand_var[12],0,rand_var[15],999,999,999,999,999,999,999,999,rand_var[16],rand_var[17],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,rand_var[15],0,rand_var[18],999,999,999,999,999,999,999,999,rand_var[19],rand_var[20],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,rand_var[18],0,rand_var[21],999,999,999,999,999,999,999,999,rand_var[22],rand_var[23],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,rand_var[21],0,rand_var[24],999,999,999,999,999,999,999,999,rand_var[25],rand_var[26],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,rand_var[24],0,999,999,999,999,999,999,999,999,rand_var[27],rand_var[28],999,999,999,999,999,999,999,999,999,rand_var[39],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ rand_var[1],999,999,999,999,999,999,999,999,999,0,rand_var[29],999,999,999,999,999,999,999,999,rand_var[30],rand_var[31],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ rand_var[2],rand_var[4],999,999,999,999,999,999,999,999,rand_var[29],0,rand_var[32],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,rand_var[5],rand_var[9],999,999,999,999,999,999,999,999,rand_var[32],0,rand_var[33],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,rand_var[10],rand_var[8],999,999,999,999,999,999,999,999,rand_var[33],0,rand_var[34],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,rand_var[11],rand_var[13],999,999,999,999,999,999,999,999,rand_var[34],0,rand_var[35],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,rand_var[14],rand_var[16],999,999,999,999,999,999,999,999,rand_var[35],0,rand_var[36],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,rand_var[17],rand_var[19],999,999,999,999,999,999,999,999,rand_var[36],0,rand_var[37],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,rand_var[20],rand_var[22],999,999,999,999,999,999,999,999,rand_var[37],0,rand_var[38],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,rand_var[23],rand_var[25],rand_var[27],999,999,999,999,999,999,999,rand_var[38],0,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,rand_var[26],rand_var[28],999,999,999,999,999,999,999,999,999,0,999,999,999,999,999,999,999,999,rand_var[40],rand_var[41],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,rand_var[30],999,999,999,999,999,999,999,999,999,0,rand_var[42],999,999,999,999,999,999,999,999,rand_var[43],rand_var[44],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,rand_var[31],999,999,999,999,999,999,999,999,rand_var[42],0,rand_var[45],999,999,999,999,999,999,999,999,rand_var[46],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[45],0,rand_var[47],999,999,999,999,999,999,999,999,rand_var[50],rand_var[51],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[47],0,rand_var[48],999,999,999,999,999,999,999,999,rand_var[49],rand_var[54],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[48],0,rand_var[52],999,999,999,999,999,999,999,999,rand_var[53],rand_var[55],999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[52],0,rand_var[56],999,999,999,999,999,999,999,999,rand_var[57],rand_var[58],999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[56],0,rand_var[59],999,999,999,999,999,999,999,999,rand_var[60],rand_var[61],999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[59],0,rand_var[62],999,999,999,999,999,999,999,999,rand_var[63],rand_var[64],999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[40],999,999,999,999,999,999,999,rand_var[62],0,rand_var[65],999,999,999,999,999,999,999,999,rand_var[66],999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,rand_var[39],999,999,999,999,999,999,999,999,999,rand_var[41],999,999,999,999,999,999,999,999,rand_var[65],0,999,999,999,999,999,999,999,999,999,rand_var[67],rand_var[68],999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[43],999,999,999,999,999,999,999,999,999,0,rand_var[69],999,999,999,999,999,999,999,999,rand_var[68],rand_var[70],999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[44],rand_var[47],999,999,999,999,999,999,999,999,rand_var[69],0,rand_var[71],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[50],999,999,999,999,999,999,999,999,rand_var[71],0,rand_var[72],999,999,999,999,999,999,999,rand_var[73],999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[51],rand_var[49],999,999,999,999,999,999,999,999,rand_var[72],0,rand_var[75],999,999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[54],rand_var[53],999,999,999,999,999,999,999,999,rand_var[75],0,rand_var[76],999,999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[55],rand_var[57],999,999,999,999,999,999,999,999,rand_var[76],0,rand_var[77],999,999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[55],rand_var[60],999,999,999,999,999,999,999,999,rand_var[77],0,rand_var[78],999,999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[61],rand_var[63],999,999,999,999,999,999,999,999,rand_var[78],0,rand_var[79],999,999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[64],rand_var[66],999,999,999,999,999,999,999,999,rand_var[79],0,rand_var[80],999,999,999,999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[67],999,999,999,999,999,999,999,999,rand_var[80],0,999,999,999,999,999,999,999,999,rand_var[81],rand_var[82] },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[68],999,999,999,999,999,999,999,999,999,999,0,rand_var[83],rand_var[84],rand_var[85],999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[70],999,rand_var[73],999,999,999,999,999,999,999,rand_var[83],0,rand_var[86],999,999,999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[84],rand_var[86],0,rand_var[87],rand_var[89],999,999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[85],999,rand_var[87],0,rand_var[88],rand_var[90],999,999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[89],rand_var[88],0,rand_var[91],rand_var[92],999,999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[90],rand_var[91],0,rand_var[93],rand_var[94],999,999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[92],rand_var[93],0,rand_var[95],rand_var[96],999 },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[94],rand_var[95],0,rand_var[97],rand_var[98] },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[81],999,999,999,999,999,999,rand_var[96],rand_var[97],0,rand_var[99] },
{ 999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,999,rand_var[82],999,999,999,999,999,999,999,rand_var[98],rand_var[99],0 },
    };

if (select==1) //Selecting between random and hard coded cost matrix
    {

       for (int x=0 ; x < 50; x++)
{
  for (int y=0 ; y < 50; y++)
  {
    cost[x][y] = costrandom[x][y];
  }
}
}
else if (select==2){

       for (int x=0 ; x < 50; x++)
{
  for (int y=0 ; y < 50; y++)
  {
    cost[x][y] = costassignment[x][y];
  }
}


}
    for (int i = 0; i < 50; i++)
    {
        for (int j = 0; j < 50; j++)
        {
            cout << cost[i][j] << " ";
        }

        cout << endl;
    }

    int src, temp;
    cout << "\nEnter source : ";  cin >> src;
    dijkstra(src, cost);
    cout << "\n\n" << endl;

    cout << "Press 1 to get all paths : ";  cin >> temp;
    if (temp == 1)
        allpath();
}


